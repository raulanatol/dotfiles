"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _path = _interopRequireDefault(require("path"));
var _underscorePlus = _interopRequireDefault(require("underscore-plus"));
var _atom = require("atom");
var _etch = _interopRequireDefault(require("etch"));
var _keybindingsPanel = _interopRequireDefault(require("./keybindings-panel"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/** @babel */
/** @jsx etch.dom */

// Displays the keybindings for a package namespace
class PackageKeymapView {
  constructor(pack) {
    this.pack = pack;
    this.otherPlatformPattern = new RegExp(`\\.platform-(?!${_underscorePlus.default.escapeRegExp(process.platform)}\\b)`);
    this.namespace = this.pack.name;
    this.disposables = new _atom.CompositeDisposable();
    _etch.default.initialize(this);
    const packagesWithKeymapsDisabled = atom.config.get('core.packagesWithKeymapsDisabled') || [];
    this.refs.keybindingToggle.checked = !packagesWithKeymapsDisabled.includes(this.namespace);
    const changeHandler = event => {
      event.stopPropagation();
      const value = this.refs.keybindingToggle.checked;
      if (value) {
        atom.config.removeAtKeyPath('core.packagesWithKeymapsDisabled', this.namespace);
      } else {
        atom.config.pushAtKeyPath('core.packagesWithKeymapsDisabled', this.namespace);
      }
      this.updateKeyBindingView();
    };
    this.refs.keybindingToggle.addEventListener('change', changeHandler);
    this.disposables.add(new _atom.Disposable(() => {
      this.refs.keybindingToggle.removeEventListener('change', changeHandler);
    }));
    const copyIconClickHandler = event => {
      const target = event.target.closest('.copy-icon');
      if (target) {
        event.preventDefault();
        event.stopPropagation();
        this.writeKeyBindingToClipboard(target.closest('tr').dataset);
      }
    };
    this.element.addEventListener('click', copyIconClickHandler);
    this.disposables.add(new _atom.Disposable(() => {
      this.element.removeEventListener('click', copyIconClickHandler);
    }));
    this.updateKeyBindingView();
    let hasKeymaps = false;
    // eslint-disable-next-line no-unused-vars
    for (let [packageKeymapsPath, keymap] of atom.packages.getLoadedPackage(this.namespace).keymaps) {
      if (keymap.length > 0) {
        hasKeymaps = true;
        break;
      }
    }
    if (this.refs.keybindingItems.children.length === 0 && !hasKeymaps) {
      this.element.style.display = 'none';
    }
  }
  update() {}
  destroy() {
    this.disposables.dispose();
    return _etch.default.destroy(this);
  }
  render() {
    return _etch.default.dom("section", {
      className: "section"
    }, _etch.default.dom("div", {
      className: "section-heading icon icon-keyboard"
    }, "Keybindings"), _etch.default.dom("div", {
      className: "checkbox"
    }, _etch.default.dom("label", {
      for: "toggleKeybindings"
    }, _etch.default.dom("input", {
      id: "toggleKeybindings",
      className: "input-checkbox",
      type: "checkbox",
      ref: "keybindingToggle"
    }), _etch.default.dom("div", {
      className: "setting-title"
    }, "Enable")), _etch.default.dom("div", {
      className: "setting-description"
    }, "Disable this if you want to bind your own keystrokes for this package's commands in your keymap.")), _etch.default.dom("table", {
      className: "package-keymap-table table native-key-bindings text",
      tabIndex: "-1"
    }, _etch.default.dom("thead", null, _etch.default.dom("tr", null, _etch.default.dom("th", null, "Keystroke"), _etch.default.dom("th", null, "Command"), _etch.default.dom("th", null, "Selector"), _etch.default.dom("th", null, "Source"))), _etch.default.dom("tbody", {
      ref: "keybindingItems"
    })));
  }
  updateKeyBindingView() {
    this.refs.keybindingItems.innerHTML = '';
    const packagesWithKeymapsDisabled = atom.config.get('core.packagesWithKeymapsDisabled') || [];
    const keybindingsDisabled = packagesWithKeymapsDisabled.includes(this.namespace);
    if (keybindingsDisabled) {
      this.refs.keybindingItems.classList.add('text-subtle');
    } else {
      this.refs.keybindingItems.classList.remove('text-subtle');
    }
    const keyBindings = [];
    if (atom.keymaps.build) {
      // eslint-disable-next-line no-unused-vars
      for (const [keymapPath, keymap] of atom.packages.getLoadedPackage(this.namespace).keymaps) {
        keyBindings.push(...atom.keymaps.build(this.namespace, keymap, 0, false));
      }
    } else {
      // Backwards compatibility for Atom <= 1.19
      for (const keyBinding of atom.keymaps.getKeyBindings()) {
        const {
          command
        } = keyBinding;
        if (command && command.indexOf && command.indexOf(`${this.namespace}:`) === 0) {
          keyBindings.push(keyBinding);
        }
      }
    }
    for (const keyBinding of keyBindings) {
      const {
        command,
        keystrokes,
        selector,
        source
      } = keyBinding;
      if (!command) {
        continue;
      }
      if (this.otherPlatformPattern.test(selector)) {
        continue;
      }
      const keyBindingRow = document.createElement('tr');
      keyBindingRow.dataset.selector = selector;
      keyBindingRow.dataset.keystrokes = keystrokes;
      keyBindingRow.dataset.command = command;
      const keystrokesTd = document.createElement('td');
      const copyIconSpan = document.createElement('span');
      copyIconSpan.classList.add('icon', 'icon-clippy', 'copy-icon');
      keystrokesTd.appendChild(copyIconSpan);
      const keystrokesSpan = document.createElement('span');
      keystrokesSpan.textContent = keystrokes;
      keystrokesTd.appendChild(keystrokesSpan);
      keyBindingRow.appendChild(keystrokesTd);
      const commandTd = document.createElement('td');
      commandTd.textContent = command;
      keyBindingRow.appendChild(commandTd);
      const selectorTd = document.createElement('td');
      selectorTd.textContent = selector;
      keyBindingRow.appendChild(selectorTd);
      const sourceTd = document.createElement('td');
      sourceTd.textContent = _keybindingsPanel.default.determineSource(source);
      keyBindingRow.appendChild(sourceTd);
      this.refs.keybindingItems.appendChild(keyBindingRow);
    }
  }
  writeKeyBindingToClipboard({
    selector,
    keystrokes,
    command
  }) {
    let content;
    const keymapExtension = _path.default.extname(atom.keymaps.getUserKeymapPath());
    if (keymapExtension === '.cson') {
      content = `\
'${selector}':
  '${keystrokes}': '${command}'\
`;
    } else {
      content = `\
"${selector}": {
  "${keystrokes}": "${command}"
}\
`;
    }
    atom.clipboard.write(content);
  }
}
exports.default = PackageKeymapView;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,