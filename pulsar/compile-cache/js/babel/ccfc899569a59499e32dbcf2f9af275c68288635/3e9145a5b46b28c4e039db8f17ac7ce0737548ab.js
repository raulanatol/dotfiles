"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _atom = require("atom");
var _path = _interopRequireDefault(require("path"));
var _fsPlus = _interopRequireDefault(require("fs-plus"));
var _temp = _interopRequireDefault(require("temp"));
var _lsArchive = _interopRequireDefault(require("ls-archive"));
var _getIconServices = _interopRequireDefault(require("./get-icon-services"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/** @babel */

class FileView {
  constructor(parentView, indexInParentView, archivePath, entry) {
    this.disposables = new _atom.CompositeDisposable();
    this.parentView = parentView;
    this.indexInParentView = indexInParentView;
    this.archivePath = archivePath;
    this.entry = entry;
    this.element = document.createElement('li');
    this.element.classList.add('list-item', 'entry');
    this.element.tabIndex = -1;
    this.name = document.createElement('span');
    (0, _getIconServices.default)().updateFileIcon(this);
    this.name.textContent = this.entry.getName();
    this.element.appendChild(this.name);
    const clickHandler = () => {
      this.select();
      this.openFile();
    };
    this.element.addEventListener('click', clickHandler);
    this.disposables.add(new _atom.Disposable(() => {
      this.element.removeEventListener('click', clickHandler);
    }));
    this.disposables.add(atom.commands.add(this.element, {
      'core:confirm': () => {
        if (this.isSelected()) {
          this.openFile();
        }
      },
      'core:move-down': () => {
        if (this.isSelected()) {
          this.parentView.selectFileAfterIndex(this.indexInParentView);
        }
      },
      'core:move-up': () => {
        if (this.isSelected()) {
          this.parentView.selectFileBeforeIndex(this.indexInParentView);
        }
      }
    }));
  }
  destroy() {
    this.disposables.dispose();
    this.element.remove();
  }
  isSelected() {
    return this.element.classList.contains('selected');
  }
  logError(message, error) {
    console.error(message, error.stack != null ? error.stack : error);
  }
  openFile() {
    _lsArchive.default.readFile(this.archivePath, this.entry.getPath(), (error, contents) => {
      if (error != null) {
        this.logError(`Error reading: ${this.entry.getPath()} from ${this.archivePath}`, error);
      } else {
        _temp.default.mkdir('atom-', (error, tempDirPath) => {
          if (error != null) {
            this.logError(`Error creating temp directory: ${tempDirPath}`, error);
          } else {
            const tempFilePath = _path.default.join(tempDirPath, _path.default.basename(this.archivePath), this.entry.getName());
            _fsPlus.default.writeFile(tempFilePath, contents, error => {
              if (error != null) {
                return this.logError(`Error writing to ${tempFilePath}`, error);
              } else {
                return atom.workspace.open(tempFilePath);
              }
            });
          }
        });
      }
    });
  }
  select() {
    this.element.focus();
    const archiveEditorElement = this.element.closest('.archive-editor');
    // On initial tree creation, it is not possible for any entries to be selected
    // (The entries also haven't been added to the DOM yet)
    if (archiveEditorElement) {
      for (const selected of archiveEditorElement.querySelectorAll('.selected')) {
        selected.classList.remove('selected');
      }
    }
    this.element.classList.add('selected');
  }
}
exports.default = FileView;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,