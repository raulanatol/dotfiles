'use babel';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.selectorsMatchScopeChain = exports.selectorForScopeChain = exports.buildScopeChainString = void 0;
var _atomSlick = _interopRequireDefault(require("atom-slick"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const EscapeCharacterRegex = /[-!"#$%&'*+,/:;=?@|^~()<>{}[\]]/g;
const cachedMatchesBySelector = {};
const getCachedMatch = (selector, scopeChain) => {
  const cachedMatchesByScopeChain = cachedMatchesBySelector[selector];
  if (cachedMatchesByScopeChain) {
    return cachedMatchesByScopeChain[scopeChain];
  }
};
const setCachedMatch = (selector, scopeChain, match) => {
  let cachedMatchesByScopeChain = cachedMatchesBySelector[selector];
  if (!cachedMatchesByScopeChain) {
    cachedMatchesByScopeChain = {};
    cachedMatchesBySelector[selector] = cachedMatchesByScopeChain;
  }
  cachedMatchesByScopeChain[scopeChain] = match;
  cachedMatchesByScopeChain[scopeChain];
};
const parseScopeChain = scopeChain => {
  scopeChain = scopeChain.replace(EscapeCharacterRegex, match => {
    return '\\' + match[0];
  });
  const parsed = _atomSlick.default.parse(scopeChain)[0];
  if (!parsed || parsed.length === 0) {
    return [];
  }
  const result = [];
  for (let i = 0; i < parsed.length; i++) {
    result.push(parsed[i]);
  }
  return result;
};
const selectorForScopeChain = (selectors, scopeChain) => {
  for (let i = 0; i < selectors.length; i++) {
    const selector = selectors[i];
    const cachedMatch = getCachedMatch(selector, scopeChain);
    if (cachedMatch != null) {
      if (cachedMatch) {
        return selector;
      } else {
        continue;
      }
    } else {
      const scopes = parseScopeChain(scopeChain);
      while (scopes.length > 0) {
        if (selector.matches(scopes)) {
          setCachedMatch(selector, scopeChain, true);
          return selector;
        }
        scopes.pop();
      }
      setCachedMatch(selector, scopeChain, false);
    }
  }
  return null;
};
exports.selectorForScopeChain = selectorForScopeChain;
const selectorsMatchScopeChain = (selectors, scopeChain) => {
  return selectorForScopeChain(selectors, scopeChain) != null;
};
exports.selectorsMatchScopeChain = selectorsMatchScopeChain;
const buildScopeChainString = scopes => {
  return `.${scopes.join(' .')}`;
};
exports.buildScopeChainString = buildScopeChainString;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFc2NhcGVDaGFyYWN0ZXJSZWdleCIsImNhY2hlZE1hdGNoZXNCeVNlbGVjdG9yIiwiZ2V0Q2FjaGVkTWF0Y2giLCJzZWxlY3RvciIsInNjb3BlQ2hhaW4iLCJjYWNoZWRNYXRjaGVzQnlTY29wZUNoYWluIiwic2V0Q2FjaGVkTWF0Y2giLCJtYXRjaCIsInBhcnNlU2NvcGVDaGFpbiIsInJlcGxhY2UiLCJwYXJzZWQiLCJzbGljayIsInBhcnNlIiwibGVuZ3RoIiwicmVzdWx0IiwiaSIsInB1c2giLCJzZWxlY3RvckZvclNjb3BlQ2hhaW4iLCJzZWxlY3RvcnMiLCJjYWNoZWRNYXRjaCIsInNjb3BlcyIsIm1hdGNoZXMiLCJwb3AiLCJzZWxlY3RvcnNNYXRjaFNjb3BlQ2hhaW4iLCJidWlsZFNjb3BlQ2hhaW5TdHJpbmciLCJqb2luIl0sInNvdXJjZXMiOlsic2NvcGUtaGVscGVycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJ1xuXG5pbXBvcnQgc2xpY2sgZnJvbSAnYXRvbS1zbGljaydcblxuY29uc3QgRXNjYXBlQ2hhcmFjdGVyUmVnZXggPSAvWy0hXCIjJCUmJyorLC86Oz0/QHxefigpPD57fVtcXF1dL2dcblxuY29uc3QgY2FjaGVkTWF0Y2hlc0J5U2VsZWN0b3IgPSB7fVxuXG5jb25zdCBnZXRDYWNoZWRNYXRjaCA9IChzZWxlY3Rvciwgc2NvcGVDaGFpbikgPT4ge1xuICBjb25zdCBjYWNoZWRNYXRjaGVzQnlTY29wZUNoYWluID0gY2FjaGVkTWF0Y2hlc0J5U2VsZWN0b3Jbc2VsZWN0b3JdXG4gIGlmIChjYWNoZWRNYXRjaGVzQnlTY29wZUNoYWluKSB7XG4gICAgcmV0dXJuIGNhY2hlZE1hdGNoZXNCeVNjb3BlQ2hhaW5bc2NvcGVDaGFpbl1cbiAgfVxufVxuXG5jb25zdCBzZXRDYWNoZWRNYXRjaCA9IChzZWxlY3Rvciwgc2NvcGVDaGFpbiwgbWF0Y2gpID0+IHtcbiAgbGV0IGNhY2hlZE1hdGNoZXNCeVNjb3BlQ2hhaW4gPSBjYWNoZWRNYXRjaGVzQnlTZWxlY3RvcltzZWxlY3Rvcl1cbiAgaWYgKCFjYWNoZWRNYXRjaGVzQnlTY29wZUNoYWluKSB7XG4gICAgY2FjaGVkTWF0Y2hlc0J5U2NvcGVDaGFpbiA9IHt9XG4gICAgY2FjaGVkTWF0Y2hlc0J5U2VsZWN0b3Jbc2VsZWN0b3JdID0gY2FjaGVkTWF0Y2hlc0J5U2NvcGVDaGFpblxuICB9XG4gIGNhY2hlZE1hdGNoZXNCeVNjb3BlQ2hhaW5bc2NvcGVDaGFpbl0gPSBtYXRjaFxuICBjYWNoZWRNYXRjaGVzQnlTY29wZUNoYWluW3Njb3BlQ2hhaW5dXG59XG5cbmNvbnN0IHBhcnNlU2NvcGVDaGFpbiA9IChzY29wZUNoYWluKSA9PiB7XG4gIHNjb3BlQ2hhaW4gPSBzY29wZUNoYWluLnJlcGxhY2UoRXNjYXBlQ2hhcmFjdGVyUmVnZXgsIChtYXRjaCkgPT4ge1xuICAgIHJldHVybiAnXFxcXCcgKyBtYXRjaFswXVxuICB9KVxuXG4gIGNvbnN0IHBhcnNlZCA9IHNsaWNrLnBhcnNlKHNjb3BlQ2hhaW4pWzBdXG4gIGlmICghcGFyc2VkIHx8IHBhcnNlZC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gW11cbiAgfVxuXG4gIGNvbnN0IHJlc3VsdCA9IFtdXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyc2VkLmxlbmd0aDsgaSsrKSB7XG4gICAgcmVzdWx0LnB1c2gocGFyc2VkW2ldKVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5jb25zdCBzZWxlY3RvckZvclNjb3BlQ2hhaW4gPSAoc2VsZWN0b3JzLCBzY29wZUNoYWluKSA9PiB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2VsZWN0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qgc2VsZWN0b3IgPSBzZWxlY3RvcnNbaV1cbiAgICBjb25zdCBjYWNoZWRNYXRjaCA9IGdldENhY2hlZE1hdGNoKHNlbGVjdG9yLCBzY29wZUNoYWluKVxuICAgIGlmIChjYWNoZWRNYXRjaCAhPSBudWxsKSB7XG4gICAgICBpZiAoY2FjaGVkTWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIHNlbGVjdG9yXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBzY29wZXMgPSBwYXJzZVNjb3BlQ2hhaW4oc2NvcGVDaGFpbilcbiAgICAgIHdoaWxlIChzY29wZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAoc2VsZWN0b3IubWF0Y2hlcyhzY29wZXMpKSB7XG4gICAgICAgICAgc2V0Q2FjaGVkTWF0Y2goc2VsZWN0b3IsIHNjb3BlQ2hhaW4sIHRydWUpXG4gICAgICAgICAgcmV0dXJuIHNlbGVjdG9yXG4gICAgICAgIH1cbiAgICAgICAgc2NvcGVzLnBvcCgpXG4gICAgICB9XG4gICAgICBzZXRDYWNoZWRNYXRjaChzZWxlY3Rvciwgc2NvcGVDaGFpbiwgZmFsc2UpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGxcbn1cblxuY29uc3Qgc2VsZWN0b3JzTWF0Y2hTY29wZUNoYWluID0gKHNlbGVjdG9ycywgc2NvcGVDaGFpbikgPT4geyByZXR1cm4gc2VsZWN0b3JGb3JTY29wZUNoYWluKHNlbGVjdG9ycywgc2NvcGVDaGFpbikgIT0gbnVsbCB9XG5cbmNvbnN0IGJ1aWxkU2NvcGVDaGFpblN0cmluZyA9IChzY29wZXMpID0+IHsgcmV0dXJuIGAuJHtzY29wZXMuam9pbignIC4nKX1gIH1cblxuZXhwb3J0IHsgc2VsZWN0b3JzTWF0Y2hTY29wZUNoYWluLCBzZWxlY3RvckZvclNjb3BlQ2hhaW4sIGJ1aWxkU2NvcGVDaGFpblN0cmluZyB9XG4iXSwibWFwcGluZ3MiOiJBQUFBLFdBQVc7O0FBQUE7RUFBQTtBQUFBO0FBQUE7QUFFWDtBQUE4QjtBQUU5QixNQUFNQSxvQkFBb0IsR0FBRyxrQ0FBa0M7QUFFL0QsTUFBTUMsdUJBQXVCLEdBQUcsQ0FBQyxDQUFDO0FBRWxDLE1BQU1DLGNBQWMsR0FBRyxDQUFDQyxRQUFRLEVBQUVDLFVBQVUsS0FBSztFQUMv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