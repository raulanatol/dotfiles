"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _atom = require("atom");
var _reporterProxy = _interopRequireDefault(require("./reporter-proxy"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/** @babel */

let WelcomeView, GuideView, ChangeLogView;
const WELCOME_URI = 'atom://welcome/welcome';
const GUIDE_URI = 'atom://welcome/guide';
const CHANGELOG_URI = 'atom://welcome/changelog';
class WelcomePackage {
  constructor() {
    this.reporterProxy = new _reporterProxy.default();
  }
  async activate() {
    this.subscriptions = new _atom.CompositeDisposable();
    this.subscriptions.add(atom.workspace.addOpener(filePath => {
      if (filePath === CHANGELOG_URI) {
        return this.createChangeLogView({
          uri: CHANGELOG_URI
        });
      }
    }));
    this.subscriptions.add(atom.workspace.addOpener(filePath => {
      if (filePath === WELCOME_URI) {
        return this.createWelcomeView({
          uri: WELCOME_URI
        });
      }
    }));
    this.subscriptions.add(atom.workspace.addOpener(filePath => {
      if (filePath === GUIDE_URI) {
        return this.createGuideView({
          uri: GUIDE_URI
        });
      }
    }));
    this.subscriptions.add(atom.commands.add('atom-workspace', 'welcome:show', () => this.show()));
    this.subscriptions.add(atom.commands.add('atom-workspace', 'welcome:showchangelog', () => this.showChangeLog()));
    if (atom.config.get('welcome.showOnStartup')) {
      await this.show();
      this.reporterProxy.sendEvent('show-on-initial-load');
    }
    if (atom.config.get('welcome.showChangeLog')) {
      let lastViewedVersion = atom.config.get('welcome.lastViewedChangeLog').split(".");
      let curVersion = atom.getVersion().split(".");
      // Usually getVersion Returns something along MAJOR.MINOR.PATCH ARCH
      // So we will account for that when checking what version they have.
      if (lastViewedVersion[0] < curVersion[0] && lastViewedVersion[1] < curVersion[1] && lastViewedVersion[2].split(" ")[0] < curVersion[2].split(" ")[0]) {
        await this.showChangeLog();
      }
    }
  }
  show() {
    return Promise.all([atom.workspace.open(WELCOME_URI, {
      split: 'left'
    }), atom.workspace.open(GUIDE_URI, {
      split: 'right'
    })]);
  }
  showChangeLog() {
    if (atom.config.get('welcome.showOnStartup')) {
      // If the welcome view will also appear open the changelog on the bottom pane
      return Promise.all([atom.workspace.open(CHANGELOG_URI, {
        split: 'down'
      })]);
    } else {
      // But if the welcome view is disabled, show the changelog in place of the welcome view.
      return Promise.all([atom.workspace.open(CHANGELOG_URI, {
        split: 'left'
      })]);
    }
  }
  consumeReporter(reporter) {
    return this.reporterProxy.setReporter(reporter);
  }
  deactivate() {
    this.subscriptions.dispose();
  }
  createWelcomeView(state) {
    if (WelcomeView == null) WelcomeView = require('./welcome-view');
    return new WelcomeView({
      reporterProxy: this.reporterProxy,
      ...state
    });
  }
  createGuideView(state) {
    if (GuideView == null) GuideView = require('./guide-view');
    return new GuideView({
      reporterProxy: this.reporterProxy,
      ...state
    });
  }
  createChangeLogView(state) {
    if (ChangeLogView == null) ChangeLogView = require("./changelog-view");
    return new ChangeLogView({
      reporterProxy: this.reporterProxy,
      ...state
    });
  }
}
exports.default = WelcomePackage;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,