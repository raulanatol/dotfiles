"use strict";

/** @babel */

const fs = require('fs');
const path = require('path');
module.exports = {
  async enumerate() {
    if (atom.inDevMode()) {
      return [];
    }
    const duplicatePackages = [];
    const names = atom.packages.getAvailablePackageNames();
    for (let name of names) {
      if (atom.packages.isBundledPackage(name)) {
        const isDuplicatedPackage = await this.isInstalledAsCommunityPackage(name);
        if (isDuplicatedPackage) {
          duplicatePackages.push(name);
        }
      }
    }
    return duplicatePackages;
  },
  async isInstalledAsCommunityPackage(name) {
    const availablePackagePaths = atom.packages.getPackageDirPaths();
    for (let packagePath of availablePackagePaths) {
      const candidate = path.join(packagePath, name);
      if (fs.existsSync(candidate)) {
        const realPath = await this.realpath(candidate);
        if (realPath === candidate) {
          return true;
        }
      }
    }
    return false;
  },
  realpath(path) {
    return new Promise((resolve, reject) => {
      fs.realpath(path, function (error, realpath) {
        if (error) {
          reject(error);
        } else {
          resolve(realpath);
        }
      });
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJwYXRoIiwibW9kdWxlIiwiZXhwb3J0cyIsImVudW1lcmF0ZSIsImF0b20iLCJpbkRldk1vZGUiLCJkdXBsaWNhdGVQYWNrYWdlcyIsIm5hbWVzIiwicGFja2FnZXMiLCJnZXRBdmFpbGFibGVQYWNrYWdlTmFtZXMiLCJuYW1lIiwiaXNCdW5kbGVkUGFja2FnZSIsImlzRHVwbGljYXRlZFBhY2thZ2UiLCJpc0luc3RhbGxlZEFzQ29tbXVuaXR5UGFja2FnZSIsInB1c2giLCJhdmFpbGFibGVQYWNrYWdlUGF0aHMiLCJnZXRQYWNrYWdlRGlyUGF0aHMiLCJwYWNrYWdlUGF0aCIsImNhbmRpZGF0ZSIsImpvaW4iLCJleGlzdHNTeW5jIiwicmVhbFBhdGgiLCJyZWFscGF0aCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZXJyb3IiXSwic291cmNlcyI6WyJkYWxlay5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGJhYmVsICovXG5cbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhc3luYyBlbnVtZXJhdGUoKSB7XG4gICAgaWYgKGF0b20uaW5EZXZNb2RlKCkpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICBjb25zdCBkdXBsaWNhdGVQYWNrYWdlcyA9IFtdO1xuICAgIGNvbnN0IG5hbWVzID0gYXRvbS5wYWNrYWdlcy5nZXRBdmFpbGFibGVQYWNrYWdlTmFtZXMoKTtcbiAgICBmb3IgKGxldCBuYW1lIG9mIG5hbWVzKSB7XG4gICAgICBpZiAoYXRvbS5wYWNrYWdlcy5pc0J1bmRsZWRQYWNrYWdlKG5hbWUpKSB7XG4gICAgICAgIGNvbnN0IGlzRHVwbGljYXRlZFBhY2thZ2UgPSBhd2FpdCB0aGlzLmlzSW5zdGFsbGVkQXNDb21tdW5pdHlQYWNrYWdlKFxuICAgICAgICAgIG5hbWVcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKGlzRHVwbGljYXRlZFBhY2thZ2UpIHtcbiAgICAgICAgICBkdXBsaWNhdGVQYWNrYWdlcy5wdXNoKG5hbWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGR1cGxpY2F0ZVBhY2thZ2VzO1xuICB9LFxuXG4gIGFzeW5jIGlzSW5zdGFsbGVkQXNDb21tdW5pdHlQYWNrYWdlKG5hbWUpIHtcbiAgICBjb25zdCBhdmFpbGFibGVQYWNrYWdlUGF0aHMgPSBhdG9tLnBhY2thZ2VzLmdldFBhY2thZ2VEaXJQYXRocygpO1xuXG4gICAgZm9yIChsZXQgcGFja2FnZVBhdGggb2YgYXZhaWxhYmxlUGFja2FnZVBhdGhzKSB7XG4gICAgICBjb25zdCBjYW5kaWRhdGUgPSBwYXRoLmpvaW4ocGFja2FnZVBhdGgsIG5hbWUpO1xuXG4gICAgICBpZiAoZnMuZXhpc3RzU3luYyhjYW5kaWRhdGUpKSB7XG4gICAgICAgIGNvbnN0IHJlYWxQYXRoID0gYXdhaXQgdGhpcy5yZWFscGF0aChjYW5kaWRhdGUpO1xuICAgICAgICBpZiAocmVhbFBhdGggPT09IGNhbmRpZGF0ZSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIHJlYWxwYXRoKHBhdGgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgZnMucmVhbHBhdGgocGF0aCwgZnVuY3Rpb24oZXJyb3IsIHJlYWxwYXRoKSB7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzb2x2ZShyZWFscGF0aCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59O1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUVBLE1BQU1BLEVBQUUsR0FBR0MsT0FBTyxDQUFDLElBQUksQ0FBQztBQUN4QixNQUFNQyxJQUFJLEdBQUdELE9BQU8sQ0FBQyxNQUFNLENBQUM7QUFFNUJFLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQ2YsTUFBTUMsU0FBUyxHQUFHO0lBQ2hCLElBQUlDLElBQUksQ0FBQ0MsU0FBUyxFQUFFLEVBQUU7TUFDcEIsT0FBTyxFQUFFO0lBQ1g7SUFFQSxNQUFNQyxpQkFBaUIsR0FBRyxFQUFFO0lBQzVCLE1BQU1DLEtBQUssR0FBR0gsSUFBSSxDQUFDSSxRQUFRLENBQUNDLHdCQUF3QixFQUFFO0lBQ3RELEtBQUssSUFBSUMsSUFBSSxJQUFJSCxLQUFLLEVBQUU7TUFDdEIsSUFBSUgsSUFBSSxDQUFDSSxRQUFRLENBQUNHLGdCQUFnQixDQUFDRCxJQUFJLENBQUMsRUFBRTtRQUN4QyxNQUFNRSxtQkFBbUIsR0FBRyxNQUFNLElBQUksQ0FBQ0MsNkJBQTZCLENBQ2xFSCxJQUFJLENBQ0w7UUFDRCxJQUFJRSxtQkFBbUIsRUFBRTtVQUN2Qk4saUJBQWlCLENBQUNRLElBQUksQ0FBQ0osSUFBSSxDQUFDO1FBQzlCO01BQ0Y7SUFDRjtJQUVBLE9BQU9KLGlCQUFpQjtFQUMxQixDQUFDO0VBRUQsTUFBTU8sNkJBQTZCLENBQUNILElBQUksRUFBRTtJQUN4QyxNQUFNSyxxQkFBcUIsR0FBR1gsSUFBSSxDQUFDSSxRQUFRLENBQUNRLGtCQUFrQixFQUFFO0lBRWhFLEtBQUssSUFBSUMsV0FBVyxJQUFJRixxQkFBcUIsRUFBRTtNQUM3QyxNQUFNRyxTQUFTLEdBQUdsQixJQUFJLENBQUNtQixJQUFJLENBQUNGLFdBQVcsRUFBRVAsSUFBSSxDQUFDO01BRTlDLElBQUlaLEVBQUUsQ0FBQ3NCLFVBQVUsQ0FBQ0YsU0FBUyxDQUFDLEVBQUU7UUFDNUIsTUFBTUcsUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDQyxRQUFRLENBQUNKLFNBQVMsQ0FBQztRQUMvQyxJQUFJRyxRQUFRLEtBQUtILFNBQVMsRUFBRTtVQUMxQixPQUFPLElBQUk7UUFDYjtNQUNGO0lBQ0Y7SUFFQSxPQUFPLEtBQUs7RUFDZCxDQUFDO0VBRURJLFFBQVEsQ0FBQ3RCLElBQUksRUFBRTtJQUNiLE9BQU8sSUFBSXVCLE9BQU8sQ0FBQyxDQUFDQyxPQUFPLEVBQUVDLE1BQU0sS0FBSztNQUN0QzNCLEVBQUUsQ0FBQ3dCLFFBQVEsQ0FBQ3RCLElBQUksRUFBRSxVQUFTMEIsS0FBSyxFQUFFSixRQUFRLEVBQUU7UUFDMUMsSUFBSUksS0FBSyxFQUFFO1VBQ1RELE1BQU0sQ0FBQ0MsS0FBSyxDQUFDO1FBQ2YsQ0FBQyxNQUFNO1VBQ0xGLE9BQU8sQ0FBQ0YsUUFBUSxDQUFDO1FBQ25CO01BQ0YsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDO0VBQ0o7QUFDRixDQUFDIn0=