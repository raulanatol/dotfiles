"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _atom = require("atom");
var _queue = _interopRequireDefault(require("async/queue"));
var _etch = _interopRequireDefault(require("etch"));
var _errorView = _interopRequireDefault(require("./error-view"));
var _packageCard = _interopRequireDefault(require("./package-card"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/** @babel */
/** @jsx etch.dom */

class UpdatesPanel {
  constructor(settingsView, packageManager) {
    this.settingsView = settingsView;
    this.packageManager = packageManager;
    this.disposables = new _atom.CompositeDisposable();
    this.updatingPackages = [];
    this.packageCards = [];
    _etch.default.initialize(this);
    this.refs.updateAllButton.style.display = 'none';
    this.checkForUpdates();
    this.disposables.add(atom.commands.add(this.element, {
      'core:move-up': () => {
        this.scrollUp();
      },
      'core:move-down': () => {
        this.scrollDown();
      },
      'core:page-up': () => {
        this.pageUp();
      },
      'core:page-down': () => {
        this.pageDown();
      },
      'core:move-to-top': () => {
        this.scrollToTop();
      },
      'core:move-to-bottom': () => {
        this.scrollToBottom();
      }
    }));
    this.disposables.add(this.packageManager.on('package-updating theme-updating', ({
      pack,
      error
    }) => {
      this.refs.checkButton.disabled = true;
      this.updatingPackages.push(pack);
    }));
    this.disposables.add(this.packageManager.on('package-updated theme-updated package-update-failed theme-update-failed', ({
      pack,
      error
    }) => {
      if (error != null) {
        this.refs.updateErrors.appendChild(new _errorView.default(this.packageManager, error).element);
      }
      for (let i = 0; i < this.updatingPackages.length; i++) {
        const update = this.updatingPackages[i];
        if (update.name === pack.name) {
          this.updatingPackages.splice(i, 1);
        }
      }
      if (!this.updatingPackages.length) {
        this.refs.checkButton.disabled = false;
      }
    }));
  }
  destroy() {
    this.clearPackageCards();
    this.disposables.dispose();
    return _etch.default.destroy(this);
  }
  update() {}
  render() {
    return _etch.default.dom("div", {
      tabIndex: "0",
      className: "panels-item"
    }, _etch.default.dom("section", {
      className: "section packages"
    }, _etch.default.dom("div", {
      className: "section-container updates-container"
    }, _etch.default.dom("div", {
      className: "updates-heading-container"
    }, _etch.default.dom("h1", {
      className: "section-heading icon icon-cloud-download"
    }, "Available Updates"), _etch.default.dom("div", {
      className: "section-heading updates-btn-group"
    }, _etch.default.dom("button", {
      ref: "checkButton",
      className: "update-all-button btn",
      onclick: () => {
        this.checkForUpdates(true);
      }
    }, "Check for Updates"), _etch.default.dom("button", {
      ref: "updateAllButton",
      className: "update-all-button btn btn-primary",
      onclick: () => {
        this.updateAll();
      }
    }, "Update All"))), _etch.default.dom("div", {
      ref: "versionPinnedPackagesMessage",
      className: "alert alert-warning icon icon-alert"
    }, "The following packages are pinned to their current version and are not being checked for updates: ", _etch.default.dom("strong", null, this.packageManager.getVersionPinnedPackages().join(', '))), _etch.default.dom("div", {
      ref: "updateErrors"
    }), _etch.default.dom("div", {
      ref: "checkingMessage",
      className: "alert alert-info icon icon-hourglass"
    }, `Checking for updates\u2026`), _etch.default.dom("div", {
      ref: "noUpdatesMessage",
      className: "alert alert-info icon icon-heart"
    }, "All of your installed packages are up to date!"), _etch.default.dom("div", {
      ref: "updatesContainer",
      className: "container package-container"
    }))));
  }
  focus() {
    this.element.focus();
  }
  show() {
    this.element.style.display = '';
  }
  beforeShow(opts) {
    if (opts && opts.back) {
      this.refs.breadcrumb.textContent = opts.back;
      this.refs.breadcrumb.onclick = () => {
        this.settingsView.showPanel(opts.back);
      };
    }
    if (opts && opts.updates) {
      this.availableUpdates = opts.updates;
      this.addUpdateViews();
    } else {
      this.availableUpdates = [];
      this.clearPackageCards();
      this.checkForUpdates();
    }
    if (this.packageManager.getVersionPinnedPackages().length === 0) {
      this.refs.versionPinnedPackagesMessage.style.display = 'none';
    }
  }

  // Check for updates and display them
  async checkForUpdates(clearCache) {
    this.refs.noUpdatesMessage.style.display = 'none';
    this.refs.updateAllButton.disabled = true;
    this.refs.checkButton.disabled = true;
    this.refs.checkingMessage.style.display = '';
    try {
      this.availableUpdates = await this.packageManager.getOutdated(clearCache);
      this.refs.checkButton.disabled = false;
      this.addUpdateViews();
    } catch (error) {
      this.refs.checkButton.disabled = false;
      this.refs.checkingMessage.style.display = 'none';
      this.refs.updateErrors.appendChild(new _errorView.default(this.packageManager, error).element);
    }
  }
  addUpdateViews() {
    if (this.availableUpdates.length > 0) {
      this.refs.updateAllButton.style.display = '';
      this.refs.updateAllButton.disabled = false;
    }
    this.refs.checkingMessage.style.display = 'none';
    this.clearPackageCards();
    if (this.availableUpdates.length === 0) {
      this.refs.noUpdatesMessage.style.display = '';
    }
    for (const pack of this.availableUpdates) {
      const packageCard = new _packageCard.default(pack, this.settingsView, this.packageManager, {
        back: 'Updates'
      });
      this.refs.updatesContainer.appendChild(packageCard.element);
      this.packageCards.push(packageCard);
    }
  }
  async updateAll() {
    this.refs.checkButton.disabled = true;
    this.refs.updateAllButton.disabled = true;
    let updatingPackages = this.updatingPackages;
    let successfulUpdatesCount = 0;
    let failedUpdatesCount = 0;
    const concurrency = atom.config.get('settings-view.packageUpdateConcurrency') > 0 ? atom.config.get('settings-view.packageUpdateConcurrency') : Number.POSITIVE_INFINITY;
    const queue = (0, _queue.default)(function (packageCard, callback) {
      const onUpdateCompleted = function (err) {
        err == null ? successfulUpdatesCount++ : failedUpdatesCount++;
      };
      if (updatingPackages.includes(packageCard.pack)) {
        callback();
      } else {
        packageCard.update().then(onUpdateCompleted, onUpdateCompleted).then(callback);
      }
    }, concurrency);
    queue.push(this.packageCards);
    await queue.drain();
    if (successfulUpdatesCount > 0) {
      const message = `Restart Atom to complete the update of ${successfulUpdatesCount} ${pluralize('package', successfulUpdatesCount)}:`;
      let detail = '';
      this.packageCards.forEach(card => {
        let oldVersion = '';
        let newVersion = '';
        if (card.pack.apmInstallSource && card.pack.apmInstallSource.type === 'git') {
          oldVersion = card.pack.apmInstallSource.sha.substr(0, 8);
          newVersion = `${card.pack.latestSha.substr(0, 8)}`;
        } else if (card.pack.version && card.pack.latestVersion) {
          oldVersion = card.pack.version;
          newVersion = card.pack.latestVersion;
        }
        if (oldVersion && newVersion) {
          detail += `${card.pack.name}@${oldVersion} -> ${newVersion}\n`;
        }
      });
      detail = detail.trim();
      const notification = atom.notifications.addSuccess(message, {
        dismissable: true,
        buttons: [{
          text: 'Restart now',
          onDidClick() {
            return atom.restartApplication();
          }
        }, {
          text: 'I\'ll do it later',
          onDidClick() {
            notification.dismiss();
          }
        }],
        detail
      });
    }
    if (failedUpdatesCount === 0) {
      this.refs.checkButton.disabled = false;
      this.refs.updateAllButton.style.display = 'none';
    } else {
      this.refs.checkButton.disabled = false;
      this.refs.updateAllButton.disabled = false;
    }
  }
  clearPackageCards() {
    while (this.packageCards.length) {
      this.packageCards.pop().destroy();
    }
  }
  scrollUp() {
    this.element.scrollTop -= document.body.offsetHeight / 20;
  }
  scrollDown() {
    this.element.scrollTop += document.body.offsetHeight / 20;
  }
  pageUp() {
    this.element.scrollTop -= this.element.offsetHeight;
  }
  pageDown() {
    this.element.scrollTop += this.element.offsetHeight;
  }
  scrollToTop() {
    this.element.scrollTop = 0;
  }
  scrollToBottom() {
    this.element.scrollTop = this.element.scrollHeight;
  }
}
exports.default = UpdatesPanel;
function pluralize(word, count) {
  return count > 1 ? `${word}s` : word;
}
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,