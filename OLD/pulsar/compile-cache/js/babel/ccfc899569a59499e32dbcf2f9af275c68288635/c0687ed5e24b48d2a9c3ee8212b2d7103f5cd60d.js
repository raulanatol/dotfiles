'use babel';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _atom = require("atom");
var _gitDiffView = _interopRequireDefault(require("./git-diff-view"));
var _diffListView = _interopRequireDefault(require("./diff-list-view"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
let diffListView = null;
let diffViews = new Set();
let subscriptions = null;
var _default = {
  activate(state) {
    subscriptions = new _atom.CompositeDisposable();
    subscriptions.add(atom.workspace.observeTextEditors(editor => {
      const editorElement = atom.views.getView(editor);
      const diffView = new _gitDiffView.default(editor, editorElement);
      diffViews.add(diffView);
      const listViewCommand = 'git-diff:toggle-diff-list';
      const editorSubs = new _atom.CompositeDisposable(atom.commands.add(editorElement, listViewCommand, () => {
        if (diffListView == null) diffListView = new _diffListView.default();
        diffListView.toggle();
      }), editor.onDidDestroy(() => {
        diffView.destroy();
        diffViews.delete(diffView);
        editorSubs.dispose();
        subscriptions.remove(editorSubs);
      }));
      subscriptions.add(editorSubs);
    }));
  },
  deactivate() {
    diffListView = null;
    for (const diffView of diffViews) diffView.destroy();
    diffViews.clear();
    subscriptions.dispose();
    subscriptions = null;
  }
};
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkaWZmTGlzdFZpZXciLCJkaWZmVmlld3MiLCJTZXQiLCJzdWJzY3JpcHRpb25zIiwiYWN0aXZhdGUiLCJzdGF0ZSIsIkNvbXBvc2l0ZURpc3Bvc2FibGUiLCJhZGQiLCJhdG9tIiwid29ya3NwYWNlIiwib2JzZXJ2ZVRleHRFZGl0b3JzIiwiZWRpdG9yIiwiZWRpdG9yRWxlbWVudCIsInZpZXdzIiwiZ2V0VmlldyIsImRpZmZWaWV3IiwiR2l0RGlmZlZpZXciLCJsaXN0Vmlld0NvbW1hbmQiLCJlZGl0b3JTdWJzIiwiY29tbWFuZHMiLCJEaWZmTGlzdFZpZXciLCJ0b2dnbGUiLCJvbkRpZERlc3Ryb3kiLCJkZXN0cm95IiwiZGVsZXRlIiwiZGlzcG9zZSIsInJlbW92ZSIsImRlYWN0aXZhdGUiLCJjbGVhciJdLCJzb3VyY2VzIjpbIm1haW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG5cbmltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUgfSBmcm9tICdhdG9tJztcbmltcG9ydCBHaXREaWZmVmlldyBmcm9tICcuL2dpdC1kaWZmLXZpZXcnO1xuaW1wb3J0IERpZmZMaXN0VmlldyBmcm9tICcuL2RpZmYtbGlzdC12aWV3JztcblxubGV0IGRpZmZMaXN0VmlldyA9IG51bGw7XG5sZXQgZGlmZlZpZXdzID0gbmV3IFNldCgpO1xubGV0IHN1YnNjcmlwdGlvbnMgPSBudWxsO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGFjdGl2YXRlKHN0YXRlKSB7XG4gICAgc3Vic2NyaXB0aW9ucyA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKCk7XG5cbiAgICBzdWJzY3JpcHRpb25zLmFkZChcbiAgICAgIGF0b20ud29ya3NwYWNlLm9ic2VydmVUZXh0RWRpdG9ycyhlZGl0b3IgPT4ge1xuICAgICAgICBjb25zdCBlZGl0b3JFbGVtZW50ID0gYXRvbS52aWV3cy5nZXRWaWV3KGVkaXRvcik7XG4gICAgICAgIGNvbnN0IGRpZmZWaWV3ID0gbmV3IEdpdERpZmZWaWV3KGVkaXRvciwgZWRpdG9yRWxlbWVudCk7XG5cbiAgICAgICAgZGlmZlZpZXdzLmFkZChkaWZmVmlldyk7XG5cbiAgICAgICAgY29uc3QgbGlzdFZpZXdDb21tYW5kID0gJ2dpdC1kaWZmOnRvZ2dsZS1kaWZmLWxpc3QnO1xuICAgICAgICBjb25zdCBlZGl0b3JTdWJzID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoXG4gICAgICAgICAgYXRvbS5jb21tYW5kcy5hZGQoZWRpdG9yRWxlbWVudCwgbGlzdFZpZXdDb21tYW5kLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoZGlmZkxpc3RWaWV3ID09IG51bGwpIGRpZmZMaXN0VmlldyA9IG5ldyBEaWZmTGlzdFZpZXcoKTtcblxuICAgICAgICAgICAgZGlmZkxpc3RWaWV3LnRvZ2dsZSgpO1xuICAgICAgICAgIH0pLFxuICAgICAgICAgIGVkaXRvci5vbkRpZERlc3Ryb3koKCkgPT4ge1xuICAgICAgICAgICAgZGlmZlZpZXcuZGVzdHJveSgpO1xuICAgICAgICAgICAgZGlmZlZpZXdzLmRlbGV0ZShkaWZmVmlldyk7XG4gICAgICAgICAgICBlZGl0b3JTdWJzLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbnMucmVtb3ZlKGVkaXRvclN1YnMpO1xuICAgICAgICAgIH0pXG4gICAgICAgICk7XG5cbiAgICAgICAgc3Vic2NyaXB0aW9ucy5hZGQoZWRpdG9yU3Vicyk7XG4gICAgICB9KVxuICAgICk7XG4gIH0sXG5cbiAgZGVhY3RpdmF0ZSgpIHtcbiAgICBkaWZmTGlzdFZpZXcgPSBudWxsO1xuXG4gICAgZm9yIChjb25zdCBkaWZmVmlldyBvZiBkaWZmVmlld3MpIGRpZmZWaWV3LmRlc3Ryb3koKTtcblxuICAgIGRpZmZWaWV3cy5jbGVhcigpO1xuXG4gICAgc3Vic2NyaXB0aW9ucy5kaXNwb3NlKCk7XG4gICAgc3Vic2NyaXB0aW9ucyA9IG51bGw7XG4gIH1cbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBLFdBQVc7O0FBQUM7RUFBQTtBQUFBO0FBQUE7QUFFWjtBQUNBO0FBQ0E7QUFBNEM7QUFFNUMsSUFBSUEsWUFBWSxHQUFHLElBQUk7QUFDdkIsSUFBSUMsU0FBUyxHQUFHLElBQUlDLEdBQUcsRUFBRTtBQUN6QixJQUFJQyxhQUFhLEdBQUcsSUFBSTtBQUFDLGVBRVY7RUFDYkMsUUFBUSxDQUFDQyxLQUFLLEVBQUU7SUFDZEYsYUFBYSxHQUFHLElBQUlHLHlCQUFtQixFQUFFO0lBRXpDSCxhQUFhLENBQUNJLEdBQUcsQ0FDZkMsSUFBSSxDQUFDQyxTQUFTLENBQUNDLGtCQUFrQixDQUFDQyxNQUFNLElBQUk7TUFDMUMsTUFBTUMsYUFBYSxHQUFHSixJQUFJLENBQUNLLEtBQUssQ0FBQ0MsT0FBTyxDQUFDSCxNQUFNLENBQUM7TUFDaEQsTUFBTUksUUFBUSxHQUFHLElBQUlDLG9CQUFXLENBQUNMLE1BQU0sRUFBRUMsYUFBYSxDQUFDO01BRXZEWCxTQUFTLENBQUNNLEdBQUcsQ0FBQ1EsUUFBUSxDQUFDO01BRXZCLE1BQU1FLGVBQWUsR0FBRywyQkFBMkI7TUFDbkQsTUFBTUMsVUFBVSxHQUFHLElBQUlaLHlCQUFtQixDQUN4Q0UsSUFBSSxDQUFDVyxRQUFRLENBQUNaLEdBQUcsQ0FBQ0ssYUFBYSxFQUFFSyxlQUFlLEVBQUUsTUFBTTtRQUN0RCxJQUFJakIsWUFBWSxJQUFJLElBQUksRUFBRUEsWUFBWSxHQUFHLElBQUlvQixxQkFBWSxFQUFFO1FBRTNEcEIsWUFBWSxDQUFDcUIsTUFBTSxFQUFFO01BQ3ZCLENBQUMsQ0FBQyxFQUNGVixNQUFNLENBQUNXLFlBQVksQ0FBQyxNQUFNO1FBQ3hCUCxRQUFRLENBQUNRLE9BQU8sRUFBRTtRQUNsQnRCLFNBQVMsQ0FBQ3VCLE1BQU0sQ0FBQ1QsUUFBUSxDQUFDO1FBQzFCRyxVQUFVLENBQUNPLE9BQU8sRUFBRTtRQUNwQnRCLGFBQWEsQ0FBQ3VCLE1BQU0sQ0FBQ1IsVUFBVSxDQUFDO01BQ2xDLENBQUMsQ0FBQyxDQUNIO01BRURmLGFBQWEsQ0FBQ0ksR0FBRyxDQUFDVyxVQUFVLENBQUM7SUFDL0IsQ0FBQyxDQUFDLENBQ0g7RUFDSCxDQUFDO0VBRURTLFVBQVUsR0FBRztJQUNYM0IsWUFBWSxHQUFHLElBQUk7SUFFbkIsS0FBSyxNQUFNZSxRQUFRLElBQUlkLFNBQVMsRUFBRWMsUUFBUSxDQUFDUSxPQUFPLEVBQUU7SUFFcER0QixTQUFTLENBQUMyQixLQUFLLEVBQUU7SUFFakJ6QixhQUFhLENBQUNzQixPQUFPLEVBQUU7SUFDdkJ0QixhQUFhLEdBQUcsSUFBSTtFQUN0QjtBQUNGLENBQUM7QUFBQTtBQUFBIn0=