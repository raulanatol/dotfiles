"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _atom = require("atom");
var _etch = _interopRequireDefault(require("etch"));
var _underscorePlus = _interopRequireDefault(require("underscore-plus"));
var _path = _interopRequireDefault(require("path"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/** @babel */
/** @jsx etch.dom */

class KeybindingsPanel {
  constructor() {
    _etch.default.initialize(this);
    this.disposables = new _atom.CompositeDisposable();
    this.disposables.add(atom.commands.add(this.element, {
      'core:move-up': () => {
        this.scrollUp();
      },
      'core:move-down': () => {
        this.scrollDown();
      },
      'core:page-up': () => {
        this.pageUp();
      },
      'core:page-down': () => {
        this.pageDown();
      },
      'core:move-to-top': () => {
        this.scrollToTop();
      },
      'core:move-to-bottom': () => {
        this.scrollToBottom();
      }
    }));
    this.otherPlatformPattern = new RegExp(`\\.platform-(?!${_underscorePlus.default.escapeRegExp(process.platform)}\\b)`);
    this.platformPattern = new RegExp(`\\.platform-${_underscorePlus.default.escapeRegExp(process.platform)}\\b`);
    this.disposables.add(this.refs.searchEditor.onDidStopChanging(() => {
      this.filterKeyBindings(this.keyBindings, this.refs.searchEditor.getText());
    }));
    this.disposables.add(atom.keymaps.onDidReloadKeymap(() => {
      this.loadKeyBindings();
    }));
    this.disposables.add(atom.keymaps.onDidUnloadKeymap(() => {
      this.loadKeyBindings();
    }));
    this.loadKeyBindings();
  }
  destroy() {
    this.disposables.dispose();
    return _etch.default.destroy(this);
  }
  update() {}
  render() {
    return _etch.default.dom("div", {
      className: "panels-item",
      tabIndex: "-1"
    }, _etch.default.dom("section", {
      className: "keybinding-panel section"
    }, _etch.default.dom("div", {
      className: "section-heading icon icon-keyboard"
    }, "Keybindings"), _etch.default.dom("div", {
      className: "text native-key-bindings",
      tabIndex: "-1"
    }, _etch.default.dom("span", {
      className: "icon icon-question"
    }), _etch.default.dom("span", null, "You can override these keybindings by copying "), _etch.default.dom("span", {
      className: "icon icon-clippy"
    }), _etch.default.dom("span", null, "and pasting them into "), _etch.default.dom("a", {
      className: "link",
      onclick: this.didClickOpenKeymapFile
    }, "your keymap file")), _etch.default.dom("div", {
      className: "editor-container"
    }, _etch.default.dom(_atom.TextEditor, {
      mini: true,
      ref: "searchEditor",
      placeholderText: "Search keybindings"
    })), _etch.default.dom("table", {
      className: "native-key-bindings table text",
      tabIndex: "-1"
    }, _etch.default.dom("col", {
      className: "keystroke"
    }), _etch.default.dom("col", {
      className: "command"
    }), _etch.default.dom("col", {
      className: "source"
    }), _etch.default.dom("col", {
      className: "selector"
    }), _etch.default.dom("thead", null, _etch.default.dom("tr", null, _etch.default.dom("th", {
      className: "keystroke"
    }, "Keystroke"), _etch.default.dom("th", {
      className: "command"
    }, "Command"), _etch.default.dom("th", {
      className: "source"
    }, "Source"), _etch.default.dom("th", {
      className: "selector"
    }, "Selector"))), _etch.default.dom("tbody", {
      ref: "keybindingRows"
    }))));
  }
  loadKeyBindings() {
    this.refs.keybindingRows.innerHTML = '';
    this.keyBindings = _underscorePlus.default.sortBy(atom.keymaps.getKeyBindings(), 'keystrokes');
    this.appendKeyBindings(this.keyBindings);
    this.filterKeyBindings(this.keyBindings, this.refs.searchEditor.getText());
  }
  focus() {
    this.refs.searchEditor.element.focus();
  }
  show() {
    this.element.style.display = '';
  }
  filterKeyBindings(keyBindings, filterString) {
    this.refs.keybindingRows.innerHTML = '';
    for (let keyBinding of keyBindings) {
      let {
        selector,
        keystrokes,
        command,
        source
      } = keyBinding;
      source = KeybindingsPanel.determineSource(source);
      var searchString = `${selector}${keystrokes}${command}${source}`.toLowerCase();
      if (!searchString) {
        continue;
      }
      const keywords = filterString.trim().toLowerCase().split(' ');
      if (keywords.every(keyword => searchString.indexOf(keyword) !== -1)) {
        this.appendKeyBinding(keyBinding);
      }
    }
  }
  appendKeyBindings(keyBindings) {
    for (const keyBinding of keyBindings) {
      this.appendKeyBinding(keyBinding);
    }
  }
  appendKeyBinding(keyBinding) {
    if (!this.showSelector(keyBinding.selector)) {
      return;
    }
    const element = this.elementForKeyBinding(keyBinding);
    element.dataset.keyBinding = keyBinding;
    this.refs.keybindingRows.appendChild(element);
  }
  showSelector(selector) {
    let segments;
    if (selector) {
      segments = selector.split(',') || [];
    } else {
      segments = [];
    }
    return segments.some(s => this.platformPattern.test(s) || !this.otherPlatformPattern.test(s));
  }
  elementForKeyBinding(keyBinding) {
    let {
      selector,
      keystrokes,
      command,
      source
    } = keyBinding;
    source = KeybindingsPanel.determineSource(source);
    const tr = document.createElement('tr');
    if (source === 'User') {
      tr.classList.add('is-user');
    }
    const keystrokeTd = document.createElement('td');
    keystrokeTd.classList.add('keystroke');
    const copyIcon = document.createElement('span');
    copyIcon.classList.add('icon', 'icon-clippy', 'copy-icon');
    copyIcon.onclick = () => {
      let content;
      const keymapExtension = _path.default.extname(atom.keymaps.getUserKeymapPath());
      const escapeCSON = input => {
        return JSON.stringify(input).slice(1, -1) // Remove wrapping double quotes
        .replace(/\\"/g, '"') // Unescape double quotes
        .replace(/'/g, '\\\''); // Escape single quotes
      };

      if (keymapExtension === '.cson') {
        content = `'${escapeCSON(selector)}':\n  '${escapeCSON(keystrokes)}': '${escapeCSON(command)}'`;
      } else {
        content = `${JSON.stringify(selector)}: {\n  ${JSON.stringify(keystrokes)}: ${JSON.stringify(command)}\n}`;
      }
      return atom.clipboard.write(content);
    };
    keystrokeTd.appendChild(copyIcon);
    const keystrokesSpan = document.createElement('span');
    keystrokesSpan.textContent = keystrokes;
    keystrokeTd.appendChild(keystrokesSpan);
    tr.appendChild(keystrokeTd);
    const commandTd = document.createElement('td');
    commandTd.classList.add('command');
    commandTd.textContent = command;
    tr.appendChild(commandTd);
    const sourceTd = document.createElement('td');
    sourceTd.classList.add('source');
    sourceTd.textContent = source;
    tr.appendChild(sourceTd);
    const selectorTd = document.createElement('td');
    selectorTd.classList.add('selector');
    selectorTd.textContent = selector;
    tr.appendChild(selectorTd);
    return tr;
  }
  didClickOpenKeymapFile(e) {
    e.preventDefault();
    atom.commands.dispatch(atom.views.getView(atom.workspace), 'application:open-your-keymap');
  }
  scrollUp() {
    this.element.scrollTop -= document.body.offsetHeight / 20;
  }
  scrollDown() {
    this.element.scrollTop += document.body.offsetHeight / 20;
  }
  pageUp() {
    this.element.scrollTop -= this.element.offsetHeight;
  }
  pageDown() {
    this.element.scrollTop += this.element.offsetHeight;
  }
  scrollToTop() {
    this.element.scrollTop = 0;
  }
  scrollToBottom() {
    this.element.scrollTop = this.element.scrollHeight;
  }

  // Private: Returns a user friendly description of where a keybinding was
  // loaded from.
  //
  // * filePath:
  //   The absolute path from which the keymap was loaded
  //
  // Returns one of:
  // * `Core` indicates it comes from a bundled package.
  // * `User` indicates that it was defined by a user.
  // * `<package-name>` the package which defined it.
  // * `Unknown` if an invalid path was passed in.
  static determineSource(filePath) {
    if (!filePath) {
      return 'Unknown';
    }
    if (filePath.indexOf(_path.default.join(atom.getLoadSettings().resourcePath, 'keymaps')) === 0) {
      return 'Core';
    } else if (filePath === atom.keymaps.getUserKeymapPath()) {
      return 'User';
    } else {
      const pathParts = filePath.split(_path.default.sep);
      const packageNameIndex = pathParts.length - 3;
      const packageName = pathParts[packageNameIndex] != null ? pathParts[packageNameIndex] : '';
      return _underscorePlus.default.undasherize(_underscorePlus.default.uncamelcase(packageName));
    }
  }
}
exports.default = KeybindingsPanel;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,