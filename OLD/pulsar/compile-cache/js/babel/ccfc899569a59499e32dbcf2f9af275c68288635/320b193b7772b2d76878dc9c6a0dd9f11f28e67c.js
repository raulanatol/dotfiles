"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.activate = activate;
exports.consumeStatusBar = consumeStatusBar;
exports.deactivate = deactivate;
exports.deserializeIncompatiblePackagesComponent = deserializeIncompatiblePackagesComponent;
var _atom = require("atom");
var _viewUri = _interopRequireDefault(require("./view-uri"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/** @babel */

let disposables = null;
function activate() {
  disposables = new _atom.CompositeDisposable();
  disposables.add(atom.workspace.addOpener(uri => {
    if (uri === _viewUri.default) {
      return deserializeIncompatiblePackagesComponent();
    }
  }));
  disposables.add(atom.commands.add('atom-workspace', {
    'incompatible-packages:view': () => {
      atom.workspace.open(_viewUri.default);
    }
  }));
}
function deactivate() {
  disposables.dispose();
}
function consumeStatusBar(statusBar) {
  let incompatibleCount = 0;
  for (let pack of atom.packages.getLoadedPackages()) {
    if (!pack.isCompatible()) incompatibleCount++;
  }
  if (incompatibleCount > 0) {
    let icon = createIcon(incompatibleCount);
    let tile = statusBar.addRightTile({
      item: icon,
      priority: 200
    });
    icon.element.addEventListener('click', () => {
      atom.commands.dispatch(icon.element, 'incompatible-packages:view');
    });
    disposables.add(new _atom.Disposable(() => tile.destroy()));
  }
}
function deserializeIncompatiblePackagesComponent() {
  const IncompatiblePackagesComponent = require('./incompatible-packages-component');
  return new IncompatiblePackagesComponent(atom.packages);
}
function createIcon(count) {
  const StatusIconComponent = require('./status-icon-component');
  return new StatusIconComponent({
    count
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkaXNwb3NhYmxlcyIsImFjdGl2YXRlIiwiQ29tcG9zaXRlRGlzcG9zYWJsZSIsImFkZCIsImF0b20iLCJ3b3Jrc3BhY2UiLCJhZGRPcGVuZXIiLCJ1cmkiLCJWSUVXX1VSSSIsImRlc2VyaWFsaXplSW5jb21wYXRpYmxlUGFja2FnZXNDb21wb25lbnQiLCJjb21tYW5kcyIsIm9wZW4iLCJkZWFjdGl2YXRlIiwiZGlzcG9zZSIsImNvbnN1bWVTdGF0dXNCYXIiLCJzdGF0dXNCYXIiLCJpbmNvbXBhdGlibGVDb3VudCIsInBhY2siLCJwYWNrYWdlcyIsImdldExvYWRlZFBhY2thZ2VzIiwiaXNDb21wYXRpYmxlIiwiaWNvbiIsImNyZWF0ZUljb24iLCJ0aWxlIiwiYWRkUmlnaHRUaWxlIiwiaXRlbSIsInByaW9yaXR5IiwiZWxlbWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJkaXNwYXRjaCIsIkRpc3Bvc2FibGUiLCJkZXN0cm95IiwiSW5jb21wYXRpYmxlUGFja2FnZXNDb21wb25lbnQiLCJyZXF1aXJlIiwiY291bnQiLCJTdGF0dXNJY29uQ29tcG9uZW50Il0sInNvdXJjZXMiOlsibWFpbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGJhYmVsICovXG5cbmltcG9ydCB7IERpc3Bvc2FibGUsIENvbXBvc2l0ZURpc3Bvc2FibGUgfSBmcm9tICdhdG9tJztcbmltcG9ydCBWSUVXX1VSSSBmcm9tICcuL3ZpZXctdXJpJztcblxubGV0IGRpc3Bvc2FibGVzID0gbnVsbDtcblxuZXhwb3J0IGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICBkaXNwb3NhYmxlcyA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKCk7XG5cbiAgZGlzcG9zYWJsZXMuYWRkKFxuICAgIGF0b20ud29ya3NwYWNlLmFkZE9wZW5lcih1cmkgPT4ge1xuICAgICAgaWYgKHVyaSA9PT0gVklFV19VUkkpIHtcbiAgICAgICAgcmV0dXJuIGRlc2VyaWFsaXplSW5jb21wYXRpYmxlUGFja2FnZXNDb21wb25lbnQoKTtcbiAgICAgIH1cbiAgICB9KVxuICApO1xuXG4gIGRpc3Bvc2FibGVzLmFkZChcbiAgICBhdG9tLmNvbW1hbmRzLmFkZCgnYXRvbS13b3Jrc3BhY2UnLCB7XG4gICAgICAnaW5jb21wYXRpYmxlLXBhY2thZ2VzOnZpZXcnOiAoKSA9PiB7XG4gICAgICAgIGF0b20ud29ya3NwYWNlLm9wZW4oVklFV19VUkkpO1xuICAgICAgfVxuICAgIH0pXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWFjdGl2YXRlKCkge1xuICBkaXNwb3NhYmxlcy5kaXNwb3NlKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25zdW1lU3RhdHVzQmFyKHN0YXR1c0Jhcikge1xuICBsZXQgaW5jb21wYXRpYmxlQ291bnQgPSAwO1xuICBmb3IgKGxldCBwYWNrIG9mIGF0b20ucGFja2FnZXMuZ2V0TG9hZGVkUGFja2FnZXMoKSkge1xuICAgIGlmICghcGFjay5pc0NvbXBhdGlibGUoKSkgaW5jb21wYXRpYmxlQ291bnQrKztcbiAgfVxuXG4gIGlmIChpbmNvbXBhdGlibGVDb3VudCA+IDApIHtcbiAgICBsZXQgaWNvbiA9IGNyZWF0ZUljb24oaW5jb21wYXRpYmxlQ291bnQpO1xuICAgIGxldCB0aWxlID0gc3RhdHVzQmFyLmFkZFJpZ2h0VGlsZSh7IGl0ZW06IGljb24sIHByaW9yaXR5OiAyMDAgfSk7XG4gICAgaWNvbi5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgYXRvbS5jb21tYW5kcy5kaXNwYXRjaChpY29uLmVsZW1lbnQsICdpbmNvbXBhdGlibGUtcGFja2FnZXM6dmlldycpO1xuICAgIH0pO1xuICAgIGRpc3Bvc2FibGVzLmFkZChuZXcgRGlzcG9zYWJsZSgoKSA9PiB0aWxlLmRlc3Ryb3koKSkpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXNlcmlhbGl6ZUluY29tcGF0aWJsZVBhY2thZ2VzQ29tcG9uZW50KCkge1xuICBjb25zdCBJbmNvbXBhdGlibGVQYWNrYWdlc0NvbXBvbmVudCA9IHJlcXVpcmUoJy4vaW5jb21wYXRpYmxlLXBhY2thZ2VzLWNvbXBvbmVudCcpO1xuICByZXR1cm4gbmV3IEluY29tcGF0aWJsZVBhY2thZ2VzQ29tcG9uZW50KGF0b20ucGFja2FnZXMpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVJY29uKGNvdW50KSB7XG4gIGNvbnN0IFN0YXR1c0ljb25Db21wb25lbnQgPSByZXF1aXJlKCcuL3N0YXR1cy1pY29uLWNvbXBvbmVudCcpO1xuICByZXR1cm4gbmV3IFN0YXR1c0ljb25Db21wb25lbnQoeyBjb3VudCB9KTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBRUE7QUFDQTtBQUFrQztBQUhsQzs7QUFLQSxJQUFJQSxXQUFXLEdBQUcsSUFBSTtBQUVmLFNBQVNDLFFBQVEsR0FBRztFQUN6QkQsV0FBVyxHQUFHLElBQUlFLHlCQUFtQixFQUFFO0VBRXZDRixXQUFXLENBQUNHLEdBQUcsQ0FDYkMsSUFBSSxDQUFDQyxTQUFTLENBQUNDLFNBQVMsQ0FBQ0MsR0FBRyxJQUFJO0lBQzlCLElBQUlBLEdBQUcsS0FBS0MsZ0JBQVEsRUFBRTtNQUNwQixPQUFPQyx3Q0FBd0MsRUFBRTtJQUNuRDtFQUNGLENBQUMsQ0FBQyxDQUNIO0VBRURULFdBQVcsQ0FBQ0csR0FBRyxDQUNiQyxJQUFJLENBQUNNLFFBQVEsQ0FBQ1AsR0FBRyxDQUFDLGdCQUFnQixFQUFFO0lBQ2xDLDRCQUE0QixFQUFFLE1BQU07TUFDbENDLElBQUksQ0FBQ0MsU0FBUyxDQUFDTSxJQUFJLENBQUNILGdCQUFRLENBQUM7SUFDL0I7RUFDRixDQUFDLENBQUMsQ0FDSDtBQUNIO0FBRU8sU0FBU0ksVUFBVSxHQUFHO0VBQzNCWixXQUFXLENBQUNhLE9BQU8sRUFBRTtBQUN2QjtBQUVPLFNBQVNDLGdCQUFnQixDQUFDQyxTQUFTLEVBQUU7RUFDMUMsSUFBSUMsaUJBQWlCLEdBQUcsQ0FBQztFQUN6QixLQUFLLElBQUlDLElBQUksSUFBSWIsSUFBSSxDQUFDYyxRQUFRLENBQUNDLGlCQUFpQixFQUFFLEVBQUU7SUFDbEQsSUFBSSxDQUFDRixJQUFJLENBQUNHLFlBQVksRUFBRSxFQUFFSixpQkFBaUIsRUFBRTtFQUMvQztFQUVBLElBQUlBLGlCQUFpQixHQUFHLENBQUMsRUFBRTtJQUN6QixJQUFJSyxJQUFJLEdBQUdDLFVBQVUsQ0FBQ04saUJBQWlCLENBQUM7SUFDeEMsSUFBSU8sSUFBSSxHQUFHUixTQUFTLENBQUNTLFlBQVksQ0FBQztNQUFFQyxJQUFJLEVBQUVKLElBQUk7TUFBRUssUUFBUSxFQUFFO0lBQUksQ0FBQyxDQUFDO0lBQ2hFTCxJQUFJLENBQUNNLE9BQU8sQ0FBQ0MsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLE1BQU07TUFDM0N4QixJQUFJLENBQUNNLFFBQVEsQ0FBQ21CLFFBQVEsQ0FBQ1IsSUFBSSxDQUFDTSxPQUFPLEVBQUUsNEJBQTRCLENBQUM7SUFDcEUsQ0FBQyxDQUFDO0lBQ0YzQixXQUFXLENBQUNHLEdBQUcsQ0FBQyxJQUFJMkIsZ0JBQVUsQ0FBQyxNQUFNUCxJQUFJLENBQUNRLE9BQU8sRUFBRSxDQUFDLENBQUM7RUFDdkQ7QUFDRjtBQUVPLFNBQVN0Qix3Q0FBd0MsR0FBRztFQUN6RCxNQUFNdUIsNkJBQTZCLEdBQUdDLE9BQU8sQ0FBQyxtQ0FBbUMsQ0FBQztFQUNsRixPQUFPLElBQUlELDZCQUE2QixDQUFDNUIsSUFBSSxDQUFDYyxRQUFRLENBQUM7QUFDekQ7QUFFQSxTQUFTSSxVQUFVLENBQUNZLEtBQUssRUFBRTtFQUN6QixNQUFNQyxtQkFBbUIsR0FBR0YsT0FBTyxDQUFDLHlCQUF5QixDQUFDO0VBQzlELE9BQU8sSUFBSUUsbUJBQW1CLENBQUM7SUFBRUQ7RUFBTSxDQUFDLENBQUM7QUFDM0MifQ==