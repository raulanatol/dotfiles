"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _fsPlus = _interopRequireDefault(require("fs-plus"));
var _humanizePlus = _interopRequireDefault(require("humanize-plus"));
var _lsArchive = _interopRequireDefault(require("ls-archive"));
var _atom = require("atom");
var _etch = _interopRequireDefault(require("etch"));
var _fileView = _interopRequireDefault(require("./file-view"));
var _directoryView = _interopRequireDefault(require("./directory-view"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/** @babel */
/** @jsx etch.dom */

class ArchiveEditorView {
  constructor(archivePath) {
    this.disposables = new _atom.CompositeDisposable();
    this.emitter = new _atom.Emitter();
    this.path = archivePath;
    this.file = new _atom.File(this.path);
    this.entries = [];
    _etch.default.initialize(this);
    this.refresh();
    this.disposables.add(this.file.onDidChange(() => this.refresh()));
    this.disposables.add(this.file.onDidRename(() => this.refresh()));
    this.disposables.add(this.file.onDidDelete(() => this.destroy()));
    const focusHandler = () => this.focusSelectedFile();
    this.element.addEventListener('focus', focusHandler);
    this.disposables.add(new _atom.Disposable(() => this.element.removeEventListener('focus', focusHandler)));
  }
  update() {}
  render() {
    return _etch.default.dom("div", {
      className: "archive-editor",
      tabIndex: "-1"
    }, _etch.default.dom("div", {
      className: "archive-container"
    }, _etch.default.dom("div", {
      ref: "loadingMessage",
      className: "padded icon icon-hourglass text-info"
    }, `Loading archive\u2026`), _etch.default.dom("div", {
      ref: "errorMessage",
      className: "padded icon icon-alert text-error"
    }), _etch.default.dom("div", {
      className: "inset-panel"
    }, _etch.default.dom("div", {
      ref: "summary",
      className: "panel-heading"
    }), _etch.default.dom("ol", {
      ref: "tree",
      className: "archive-tree padded list-tree has-collapsable-children"
    }))));
  }
  copy() {
    return new ArchiveEditorView(this.path);
  }
  destroy() {
    while (this.entries.length > 0) {
      this.entries.pop().destroy();
    }
    this.disposables.dispose();
    this.emitter.emit('did-destroy');
    _etch.default.destroy(this);
  }
  onDidDestroy(callback) {
    return this.emitter.on('did-destroy', callback);
  }
  onDidChangeTitle(callback) {
    return this.emitter.on('did-change-title', callback);
  }
  serialize() {
    return {
      deserializer: this.constructor.name,
      path: this.path
    };
  }
  getPath() {
    return this.file.getPath();
  }
  getTitle() {
    return this.path ? this.file.getBaseName() : 'untitled';
  }
  getURI() {
    return this.path;
  }
  refresh() {
    this.refs.summary.style.display = 'none';
    this.refs.tree.style.display = 'none';
    this.refs.loadingMessage.style.display = '';
    this.refs.errorMessage.style.display = 'none';
    if (this.path !== this.getPath()) {
      this.path = this.getPath();
      this.emitter.emit('did-change-title');
    }
    const originalPath = this.path;
    _lsArchive.default.list(this.path, {
      tree: true
    }, (error, entries) => {
      if (originalPath !== this.path) {
        return;
      }
      if (error != null) {
        let message = 'Reading the archive file failed';
        if (error.message) {
          message += `: ${error.message}`;
        }
        this.refs.errorMessage.style.display = '';
        this.refs.errorMessage.textContent = message;
      } else {
        this.createTreeEntries(entries);
        this.updateSummary();
      }

      // We hide the loading message _after_ creating the archive tree
      // to avoid forced reflows.
      this.refs.loadingMessage.style.display = 'none';
    });
  }
  createTreeEntries(entries) {
    while (this.entries.length > 0) {
      this.entries.pop().destroy();
    }
    let index = 0;
    for (const entry of entries) {
      if (entry.isDirectory()) {
        const entryView = new _directoryView.default(this, index, this.path, entry);
        this.entries.push(entryView);
      } else {
        const entryView = new _fileView.default(this, index, this.path, entry);
        this.entries.push(entryView);
      }
      index++;
    }
    this.selectFileAfterIndex(-1);

    // Wait until selecting (focusing) the first file before appending the entries
    // to avoid a double-forced reflow when focusing.
    for (const entry of this.entries) {
      this.refs.tree.appendChild(entry.element);
    }
    this.refs.tree.style.display = '';
  }
  updateSummary() {
    const fileCount = this.entries.filter(entry => entry instanceof _fileView.default).length;
    const fileLabel = fileCount === 1 ? '1 file' : `${_humanizePlus.default.intComma(fileCount)} files`;
    const directoryCount = this.entries.filter(entry => entry instanceof _directoryView.default).length;
    const directoryLabel = directoryCount === 1 ? '1 folder' : `${_humanizePlus.default.intComma(directoryCount)} folders`;
    this.refs.summary.style.display = '';
    this.refs.summary.textContent = `${_humanizePlus.default.fileSize(_fsPlus.default.getSizeSync(this.path))} with ${fileLabel} and ${directoryLabel}`;
  }
  focusSelectedFile() {
    const selectedFile = this.refs.tree.querySelector('.selected');
    if (selectedFile) {
      selectedFile.focus();
    }
  }
  selectFileBeforeIndex(index) {
    for (let i = index - 1; i >= 0; i--) {
      const previousEntry = this.entries[i];
      if (previousEntry instanceof _fileView.default) {
        previousEntry.select();
        break;
      } else {
        if (previousEntry.selectLastFile()) {
          break;
        }
      }
    }
  }
  selectFileAfterIndex(index) {
    for (let i = index + 1; i < this.entries.length; i++) {
      const nextEntry = this.entries[i];
      if (nextEntry instanceof _fileView.default) {
        nextEntry.select();
        break;
      } else {
        if (nextEntry.selectFirstFile()) {
          break;
        }
      }
    }
  }
  focus() {
    this.focusSelectedFile();
  }
}
exports.default = ArchiveEditorView;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,